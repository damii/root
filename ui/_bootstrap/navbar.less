//
// Navbars
// --------------------------------------------------


// Wrapper and base class
//
// Provide a static navbar from which we expand to create full-width, fixed, and
// other navbar variations.

.navbar {
    z-index: @zindex-navbar;
    position: relative;
    border-top-width: 1px;
    border-top-style: solid;
    //border-bottom-width: 1px;
    //border-bottom-style: solid;
  // Prevent floats from breaking the navbar
  &:extend(.clearfix all);
  // for sizing issue
  //box-sizing: content-box;
}
// Navbar collapse (body)
//
// Group your navbar content into this for easy collapsing and expanding across
// various device sizes. By default, this content is collapsed when <768px, but
// will expand past that for a horizontal display.
//
// To start (on mobile devices) the navbar links, forms, and buttons are stacked
// vertically and include a `max-height` to overflow in case you have too much
// content for the user's viewport.

// Both navbar header and collapse
//
// When a container is present, change the behavior of the header and collapse.

//
// Navbar alignment options
//
// Display the navbar across the entirety of the page or fixed it to the top or
// bottom of the page.

// Fix the top/bottom navbars when screen real estate supports it
.navbar-fixed-top.navbar-azu,
.navbar-fixed-bottom.navbar-azu {
  position: fixed ; 
  right: 0 ;
  left: 0 ;
  z-index: @zindex-navbar-fixed;
  width: 100%;
  @media (min-width: @grid-float-breakpoint) {
    border-radius: 0;
    //.box-shadow(0px 1px 1px rgba(0,0,0,0.25));
    }
}
.navbar-fixed-top {
  top: 0;
  border: 0;//border-width: 0 0 1px;
}
.navbar-fixed-bottom {
  bottom: 0;
  margin-bottom: 0; // override .navbar defaults
  border: 0;//border-width: 1px 0 0;
}

// Navbar toggle
//
// Custom button for toggling the `.navbar-collapse`, powered by the collapse
// JavaScript plugin.

.navbar-toggle {
  position: relative;
  float: right;
  //margin-right: 5px;//@navbar-padding-horizontal;
  padding: 10px;
  //.navbar-vertical-align(34px);
  //margin-top: @grid-gutter-half-width;
  //margin-bottom: @grid-gutter-half-width;
  background-color: transparent;
  background-image: none; // Reset unusual Firefox-on-Android default style; see https://github.com/necolas/normalize.css/issues/214
  border: 0 none;

  // We remove the `outline` here, but later compensate by attaching `:hover`
  // styles to `:focus`.
  &:focus {
  outline: 0;
  }

  // Bars
  .burger-bar {
    position: relative;
    display: block;
    width: 22px;
    height: 0px;
    border-top-width: 1px;
    border-top-style: solid;
    border-bottom-width: 1px;
    border-bottom-style: solid;
    border-radius: 2px;
    -webkit-transform-origin: left center;
    transform-origin: left center;
    //.transition(all 0.3s ease-in-out);
  }
  .burger-bar + .burger-bar {
    margin-top: 4px;
  }
    .burger-bar-show-points() when not (@header-layout = side) {
        @media (min-width: @grid-float-breakpoint) {
            display: none;
        }
    }
    .burger-bar-show-points() when (@header-layout = side) {
        @media (min-width: @screen-md-min) {
            display: none;
        }
    }
    &:hover {
        
    }
/*    &.active {
        .burger-bar {
            margin-top: 0;
        }
        .burger-bar:nth-child(2) {
            -webkit-transform: rotate(45deg);
            transform: rotate(45deg);
            top: -5px;
            left: 3px;
        }
        .burger-bar:nth-child(3) {
            opacity: 0;
        }
        .burger-bar:nth-child(4) {
            -webkit-transform: rotate(-45deg);
            transform: rotate(-45deg);
            top: 7px;
            left: 3px;
        }
    }
    */
    .burger-bar-show-points();
}
// Navbar nav links
//
// Builds on top of the `.nav` components with its own modifier class to make
// the nav the full height of the horizontal nav (above 768px).

.navbar-nav {
  border: 0;
}
// Navbar form
//
// Extension of the `.form-inline` with some extra flavor for optimum display in
// our navbars.

.navbar-form {
  margin-left: -@navbar-padding-horizontal;
  margin-right: -@navbar-padding-horizontal;
  padding: 10px @navbar-padding-horizontal;
  border-top: 1px solid transparent;
  border-bottom: 1px solid transparent;
  @shadow: inset 0 1px 0 rgba(255,255,255,.1), 0 1px 0 rgba(255,255,255,.1);
  .box-shadow(@shadow);

  // Mixin behavior for optimum display
  .form-inline();

  .form-group {
    @media (max-width: @grid-float-breakpoint-max) {
      margin-bottom: 5px;
    }
  }

  // Vertically center in expanded, horizontal navbar
  .navbar-vertical-align(@input-height-base);

  // Undo 100% width for pull classes
  @media (min-width: @grid-float-breakpoint) {
    width: auto;
    border: 0;
    margin-left: 0;
    margin-right: 0;
    padding-top: 0;
    padding-bottom: 0;
    .box-shadow(none);
    }
}

// Buttons in navbars
//
// Vertically center a button within a navbar (when *not* in a form).

.navbar-btn {
  .navbar-vertical-align(@input-height-base);

  &.btn-sm {
    .navbar-vertical-align(@input-height-small);
  }
  &.btn-xs {
    .navbar-vertical-align(22);
  }
}


// Text in navbars
//
// Add a class to make any element properly align itself vertically within the navbars.

.navbar-text {
  .navbar-vertical-align(@line-height-computed);

  @media (min-width: @grid-float-breakpoint) {
    float: left;
    margin-left: @navbar-padding-horizontal;
    margin-right: @navbar-padding-horizontal;
  }
}


// Component alignment
//
// Repurpose the pull utilities as their own navbar utilities to avoid specificity
// issues with parents and chaining. Only do this when the navbar is uncollapsed
// though so that navbar contents properly stack and align in mobile.
//
// Declared after the navbar components to ensure more specificity on the margins.

@media (min-width: @grid-float-breakpoint) {
  .navbar-left  { .pull-left(); }
  .navbar-right {
    .pull-right();
    margin-right: -@navbar-padding-horizontal;

    ~ .navbar-right {
      margin-right: 0;
    }
  }
}

.menu-image-position() when (@menu-image-position = top) {
    display: block;
    margin: 0 auto;
    & ~ span {
        display: inline-block;
    }
}

.menu-image-position() when (@menu-image-position = bottom) {
    display: block;
    margin: 0 auto;
    & ~ span {
        display: inline-block;
    }
}

.navbar ul li a img {
    .menu-image-position();

}
